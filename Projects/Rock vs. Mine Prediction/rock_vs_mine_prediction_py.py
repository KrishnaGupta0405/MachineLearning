# -*- coding: utf-8 -*-
"""Rock vs. Mine Prediction.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EkdIKBD9Tp7hQdXujYYZ05LF5YPg4XDe

# Import thr libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""# impot the dataset"""

dataset = pd.read_csv('sonar_data.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

# Encode labels if they are strings
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

"""#spiltting the dataset"""

import sklearn
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

print(X_train)

print(y_train)

"""#Traning the dataset"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

"""#Predicting the test result"""

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""# Making the confusion matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

"""#Accuracy Score"""

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred)

"""#Visulaising the results

here we can't plot a simple 2d graph because the are 60 independenet features in out dataset, and for 2D we need only two,

And just for geeks, i have done it ðŸ˜‚ðŸ˜‚, and here are the results
"""

from matplotlib.colors import ListedColormap
import numpy as np
import matplotlib.pyplot as plt

X_set, y_set = X_train, y_train

X1, X2 = np.meshgrid(np.arange(start=X_set[:, 0].min() - 10, stop=X_set[:, 0].max() + 10, step=0.25),
                     np.arange(start=X_set[:, 1].min() - 1000, stop=X_set[:, 1].max() + 1000, step=0.25))

grid_points = np.array([X1.ravel(), X2.ravel()]).T.astype(np.float64)

if grid_points.shape[1] < X_train.shape[1]:
    extended_grid = np.zeros((grid_points.shape[0], X_train.shape[1]))
    extended_grid[:, :2] = grid_points
else:
    extended_grid = grid_points

Z = classifier.predict(extended_grid).astype(np.float64).reshape(X1.shape)

plt.contourf(X1, X2, Z, alpha=0.75, cmap=ListedColormap(['#FA8072', '#1E90FF']))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())

for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c=ListedColormap(['#FA8072', '#1E90FF'])(i), label=j)

plt.title('Logistic Regression (Training set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()